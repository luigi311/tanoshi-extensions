name: CI

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - .gitignore
      - "**/*.md"

env:
  RUST_TOOLCHAIN: 1.79.0

jobs:
  build:
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            extension: so          
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            extension: so
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
            extension: dylib
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
            extension: dll
    runs-on: ${{ matrix.platform.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Cross build
        if: ${{ matrix.platform.target != 'x86_64-unknown-linux-gnu' }}
        uses: houseabsolute/actions-rust-cross@v0
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.platform.target }} 
          command: build
          args: "--release"

      - name: Start FlareSolverr
        if: ${{ matrix.platform.target == 'x86_64-unknown-linux-gnu' }}
        run: | 
          docker run -d \
            --name=flaresolverr \
            -p 8191:8191 \
            -e LOG_LEVEL=info \
            --restart unless-stopped \
            --network=host \
            ghcr.io/flaresolverr/flaresolverr:latest
          
          # Sleep 5 seconds to wait for FlareSolverr to start
          sleep 5

      # Test only on linux once
      - name: Cargo test
        if: ${{ matrix.platform.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          cargo build --release --target ${{ matrix.platform.target }}

          FLARESOLVERR_URL="http://localhost:8191/v1" cargo test --release --target ${{ matrix.platform.target }}

          # Stop FlareSolverr
          docker stop flaresolverr

      - name: Generate json
        if: ${{ matrix.platform.target == 'x86_64-unknown-linux-gnu' }}
        run: |
          URL=$(curl -sL "https://api.github.com/repos/luigi311/tanoshi/releases/latest" | grep "tanoshi-cli" | grep '"browser_download_url":' | sed -E 's/.*"([^"]+)".*/\1/') 
          curl -L $URL -o $HOME/.cargo/bin/tanoshi-cli
          chmod +x $HOME/.cargo/bin/tanoshi-cli
          $HOME/.cargo/bin/tanoshi-cli --path target/${{ matrix.platform.target }}/release generate-json
          mv output/${{ matrix.platform.target }}/index.json output/

      - if: ${{ matrix.platform.target != 'x86_64-unknown-linux-gnu' }}
        run: |
          mkdir -p output/${{ matrix.platform.target }}/
          cp target/${{ matrix.platform.target }}/release/*.${{ matrix.platform.extension }} output/${{ matrix.platform.target }}/
      
      - if: ${{ matrix.platform.target != 'x86_64-unknown-linux-gnu' && matrix.platform.target != 'x86_64-pc-windows-msvc' }}
        run: cd output/${{ matrix.platform.target }}/ && for f in *.${{ matrix.platform.extension }};do mv $f ${f#lib}; done; cd ../..
      
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}
          path: output
  
  push:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4

      - name: Clone repo
        run: |
          git clone https://github.com/luigi311/tanoshi-extensions repository
          cd repository
          # Create branch if not exists
          git checkout ${{ env.RUST_TOOLCHAIN }} || git checkout -b ${{ env.RUST_TOOLCHAIN }}
          # Remove all existing files
          rm -rf *
          cd ..
          
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          path: repository
          merge-multiple: true

      - name: Commit files
        run: |
          cd repository
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "deploy"
          cd ..

      - name: Git Commit and Push
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.RUST_TOOLCHAIN }}
          directory: repository